#include <winsock2.h>
#include <iostream>
#include <string>
#pragma comment(lib, "ws2_32.lib")

#define SERVER_IP "127.0.0.1"
#define PORT 1100

void displayMenu() {
    std::cout << "\nPOP3 Client Menu:\n";
    std::cout << "1. LIST - List all messages\n";
    std::cout << "2. RETR <id> - Retrieve message by ID\n";
    std::cout << "3. QUIT - Exit\n";
    std::cout << "Enter command: ";
}

int main() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed\n";
        return 1;
    }

    SOCKET clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed\n";
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);
    serverAddr.sin_port = htons(PORT);

    if (connect(clientSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Connection failed\n";
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    char buffer[1024];
    int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
    if (bytesReceived > 0) {
        buffer[bytesReceived] = '\0';
        std::cout << "Server: " << buffer;
    }

    while (true) {
        displayMenu();
        std::string command;
        std::getline(std::cin, command);

        if (command.empty()) continue;

        send(clientSocket, command.c_str(), command.size(), 0);

        if (command == "QUIT") {
            bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
            if (bytesReceived > 0) {
                buffer[bytesReceived] = '\0';
                std::cout << "Server: " << buffer;
            }
            break;
        }

        // Read multi-line responses
        while (true) {
            bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
            if (bytesReceived <= 0) break;
            
            buffer[bytesReceived] = '\0';
            std::cout << "Server: " << buffer;
            
            // Check for termination marker
            if (std::string(buffer).find("\r\n.\r\n") != std::string::npos) {
                break;
            }
        }
    }

    closesocket(clientSocket);
    WSACleanup();
    return 0;
}
